[{"/home/user/Vue_Dev/VUE PRACTICE PROJECTS/Vue_Rnotes/Cuvette projects/Note-taking-app/src/index.js":"1","/home/user/Vue_Dev/VUE PRACTICE PROJECTS/Vue_Rnotes/Cuvette projects/Note-taking-app/src/App.js":"2","/home/user/Vue_Dev/VUE PRACTICE PROJECTS/Vue_Rnotes/Cuvette projects/Note-taking-app/src/reportWebVitals.js":"3","/home/user/Vue_Dev/VUE PRACTICE PROJECTS/Vue_Rnotes/Cuvette projects/Note-taking-app/src/component/Main.jsx":"4","/home/user/Vue_Dev/VUE PRACTICE PROJECTS/Vue_Rnotes/Cuvette projects/Note-taking-app/src/component/ModalPopUp.jsx":"5"},{"size":539,"mtime":1701096665435,"results":"6","hashOfConfig":"7"},{"size":203,"mtime":1701096766332,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1685342218032,"results":"9","hashOfConfig":"7"},{"size":12654,"mtime":1702210901806,"results":"10","hashOfConfig":"7"},{"size":3903,"mtime":1702210992923,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"as3zhw",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/user/Vue_Dev/VUE PRACTICE PROJECTS/Vue_Rnotes/Cuvette projects/Note-taking-app/src/index.js",[],[],[],"/home/user/Vue_Dev/VUE PRACTICE PROJECTS/Vue_Rnotes/Cuvette projects/Note-taking-app/src/App.js",[],[],"/home/user/Vue_Dev/VUE PRACTICE PROJECTS/Vue_Rnotes/Cuvette projects/Note-taking-app/src/reportWebVitals.js",[],[],"/home/user/Vue_Dev/VUE PRACTICE PROJECTS/Vue_Rnotes/Cuvette projects/Note-taking-app/src/component/Main.jsx",["30","31"],[],"import React, { useState } from 'react'\nimport '../component/MainStyle.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPaperPlane, faArrowLeft } from '@fortawesome/free-solid-svg-icons';\nimport ModalPopUp from './ModalPopUp';\nimport FloatingLabel from 'react-bootstrap/FloatingLabel';\nimport { Form, Button } from 'react-bootstrap';\n\nfunction Main() {\n    // const [modalShow, setModalShow] = React.useState(false);         // throught this method we don't have to write import upwards like this => import React, { useState } from 'react'\n\n    const [modalShow, setModalShow] = useState(false);\n    const [createdGroupNames, setCreatedGroupNames] = useState([]);\n    const [selectedGroup, setSelectedGroup] = useState(null);\n    const [noteContent, setNoteContent] = useState([]); // State to track textarea content\n    const [notes, setNotes] = useState([]);\n    const [isSideBarVisible, setIsSideBarVisible] = useState(true);\n\n    const handleGroupCreated = (groupName, selectedColor) => {\n        const newGroup = { name: groupName, color: selectedColor };\n        setCreatedGroupNames((prevGroupNames) => [...prevGroupNames, newGroup]);\n        setSelectedGroup(newGroup);\n\n        setIsSideBarVisible(true);\n    };\n\n    const handleGroupSelection = (group) => {\n        setSelectedGroup(group);\n\n        if (window.innerWidth < 768) {\n            setIsSideBarVisible(false);\n        }\n\n    };\n\n    const handleInputChange = (e) => {\n        setNoteContent(e.target.value);\n    };\n\n\n    const handleButtonClick = () => {\n        if (selectedGroup) {\n            // Retrieve existing notes from localStorage\n            const existingNotes = JSON.parse(localStorage.getItem('noteTakingKey')) || [];\n\n            // Create a new note object with content, current time, and selected group information\n            const newNote = {\n                content: noteContent,\n                time: new Date().toLocaleString('en-US', {\n                    hour: 'numeric',\n                    minute: 'numeric',\n                    hour12: true,\n                }),\n                date: new Date().toLocaleString('en-US', {\n                    day: 'numeric',\n                    month: 'long',\n                    year: 'numeric',\n                }),\n                group: selectedGroup,\n            };\n\n            // Push the new note to the existing array\n            existingNotes.push(newNote);\n\n            // Store the updated array in localStorage\n            localStorage.setItem('noteTakingKey', JSON.stringify(existingNotes));\n            setNotes(existingNotes); // Update the notes state here\n\n            // Optionally, you can clear the input value after submission\n            setNoteContent('');\n        } else {\n            alert('Please select a group before adding a note.');\n        }\n\n    };\n\n    function handleBackButtonClick() {\n        setSelectedGroup(null);\n        setIsSideBarVisible(true);\n    }\n\n    return (\n        <>\n            <div className='container-fluid'>\n                <div className='row'>\n                    {isSideBarVisible && (\n                        <div className='col-12 col-md-4 main-side-bar'>\n                            <div className='row'>\n                                <div className='col-12'>\n                                    <div>\n                                        <h2 className='main-head-text my-4 px-3'>Pocket Notes</h2>\n                                    </div>\n                                    <div className='text-align-center text-center'>\n                                        <button type=\"button\" className=\"btn main-btn-style my-3\" onClick={() => setModalShow(true)}><b>+</b> Create Notes Group</button>\n                                        <ModalPopUp\n                                            show={modalShow}\n                                            onHide={() => setModalShow(false)}\n                                            groupCreated={handleGroupCreated} // Updated prop name\n                                        />\n                                    </div>\n                                </div>\n                                <div className='col-12 scrollable-col'>\n                                    {/* Display the created group names under each other */}\n                                    {createdGroupNames.length > 0 && (\n                                        <div className='text-center'>\n                                            <ul>\n                                                {createdGroupNames.map((group, index) => (\n                                                    <li\n                                                        className={`my-3 p-4 main-li-style ${selectedGroup && selectedGroup.name === group.name ? 'selected' : ''}`}\n                                                        key={index}\n                                                        onClick={() => handleGroupSelection(group)}\n                                                    >\n                                                        <div style={{ display: 'flex', alignItems: 'center' }}>\n                                                            <div\n                                                                className='main-color-circle'\n                                                                style={{ backgroundColor: group.color, marginRight: '10px' }}\n                                                            >\n                                                            </div>\n                                                            <h3>{group.name}</h3>\n                                                        </div>\n                                                    </li>\n                                                ))}\n                                            </ul>\n                                        </div>\n                                    )}\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                    {/* <div className='col-md-8 main-text-area p-0 d-none d-md-block'> */}\n                    <div className={`col-md-8 main-text-area p-0  ${isSideBarVisible ? '' : 'col-12'}`}>\n\n                        <div className=\"container-fluid parent-container\">\n                            <div className=\"row\">\n                                <div className=\"col-12 main-first-child p-0\">\n                                    <div className='main-nav'>\n                                        {selectedGroup && (\n                                            <div style={{ display: 'flex', alignItems: 'center' }}>\n                                                <div className='d-md-none mx-3'>\n                                                    <FontAwesomeIcon\n                                                        icon={faArrowLeft}\n                                                        style={{\n                                                            fontSize: '1.5em',\n                                                            cursor: 'pointer',\n                                                            marginRight: '10px',\n                                                        }}\n                                                        onClick={handleBackButtonClick} // Add your back button logic here\n                                                    />\n                                                </div>\n                                                <div\n                                                    className='main-color-circle mx-4'\n                                                    style={{ backgroundColor: selectedGroup.color, marginRight: '10px' }}\n                                                >\n\n                                                </div>\n                                                <h2 className='main-h2-text my-4'>{selectedGroup.name}</h2>\n                                            </div>\n                                        )}\n                                    </div>\n                                    <div className='show-data'>\n                                        <div className='container main-user-note'>\n                                            {selectedGroup &&\n                                                notes\n                                                    .filter((note) => note.group && selectedGroup && note.group.name === selectedGroup.name)\n                                                    .map((note, index) => (\n                                                        <div key={index} className='row my-4'>\n                                                            <div className='container-fluid'>\n                                                                <div className='row mx-4'>\n                                                                    <div className='col-2'>\n                                                                        <div><p className='mb-0'>{note.time}</p></div>\n                                                                        <div><p className='mb-0'>{note.date}</p> </div>\n                                                                    </div>\n                                                                    <div className='col-10'>\n                                                                        <div className='note-content'><p>{note.content}</p></div>\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    ))}\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"col-12 main-second-child\">\n                                    <div className=\"p-4\">\n                                        {selectedGroup && (\n                                            <div style={{ height: '20vh' }}>\n                                                <Form.Control\n                                                    as=\"div\"  // Use a div instead of textarea\n                                                    style={{ position: 'relative', height: '100%', width: \"100%\", padding: \"1rem 1rem\" }}\n                                                >\n                                                    <textarea\n                                                        style={{ width: '100%', height: '100%', border: 'none', outline: 'none', resize: 'none' }}\n                                                        placeholder=\"Enter your text here\"\n                                                        value={noteContent}\n                                                        onChange={handleInputChange}\n                                                    />\n                                                    <div\n                                                        style={{\n                                                            position: 'absolute',\n                                                            bottom: '10px',\n                                                            right: '10px',\n                                                            cursor: 'pointer',\n                                                        }}\n                                                    >\n                                                        <FontAwesomeIcon\n                                                            icon={faPaperPlane}\n                                                            style={{\n                                                                fontSize: '1.5em',\n                                                            }}\n                                                            onClick={handleButtonClick} \n                                                        />\n                                                    </div>\n                                                </Form.Control>\n                                            </div>\n                                        )}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Main;",[],"/home/user/Vue_Dev/VUE PRACTICE PROJECTS/Vue_Rnotes/Cuvette projects/Note-taking-app/src/component/ModalPopUp.jsx",[],[],{"ruleId":"32","severity":1,"message":"33","line":6,"column":8,"nodeType":"34","messageId":"35","endLine":6,"endColumn":21},{"ruleId":"32","severity":1,"message":"36","line":7,"column":16,"nodeType":"34","messageId":"35","endLine":7,"endColumn":22},"no-unused-vars","'FloatingLabel' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used."]